//    Slicer: Sass Responsive 'slicer', a tool set for breakpoints
//    Created by Te Riu Warren (@tedawebguy) for the team at Summer of Dev (@summerofdev)
//    - Dependencies: Sass >= 3.4
//    - Version: 2.0.0
//    - License: MIT License
//
//    Current limitations:
//    - no 'PPI' support
//    - no 'orientation' support
//
//    Error ideas:
//    - @error "Da fuck you doing? You're setting the 'from' value twice!";
//    - @error "You're living way too dangerously! ERROR";
//    - @error "Go straight to Jail. Do not pass Go. You fucked up. ERROR";


//
// DEPENDENCIES
//
@import "src/variable";
@import "src/helper";


//
// PARSER
//


// Create media query
// @param $point-map = (from: value, to: value, at: value) Map of key/values to use in media query
// @param $direction Direction of breakpoints
// @param $media Media value to use
// @return string Media Query, wrapping @content
@mixin bp($point-map, $direction: 'horizontal', $media: $breakpoint-media-default) {
    $query: '';
    $count: 0;
    $media: (media: $media);
    $point-map: map-merge($media, $point-map);

    @if $direction == 'horizontal' {
        $points: $breakpoint-horizontal;
        $type: 'width';
    }
    @else {
        $points: $breakpoint-vertical;
        $type: 'height';
    }

    @each $key, $value in $point-map {
        @if map-has-key($points, $value) or $key == 'media' {

            // Set overlap unit
            @if $breakpoint-em-convert {
                $overlap: 1em;
            }
            @else {
                $overlap: 1px;
            }

            // Only pass 'values'
            @if $key != 'media' {

                // Current value
                $parsed-value: map-get($points, $value);
                $parsed-value: em($parsed-value);

                // Next value
                $parsed-value-next: map-get-next($points, $value);
                $parsed-value-next: em($parsed-value-next);
            }


            @if $count == 1 and $key == 'from' or $key == 'at' {
                $parsed-value: strip-unit($parsed-value) + strip-unit(em(1px));
                $parsed-value: $parsed-value * $overlap;
            }

            @if $count > 0 {
                $query: $query + ' and ';
            }

            @if $key == 'from' {
                $query: $query + '(min-#{$type}: ' + $parsed-value + ')';
            }

            @elseif $key == 'to' {
                $query: $query + '(max-#{$type}: ' + $parsed-value + ')';
            }

            @elseif $key == 'at' {
                $query: $query + '(min-#{$type}: ' + $parsed-value + ')';
                $query: $query + ' and ';
                $query: $query + '(max-#{$type}: ' + $parsed-value-next + ')';
            }

            @elseif $key == 'media' {
                $query: $query + $value;
            }

            $count: $count + 1;

        }
        @else {
            @error "You're living way too dangerously! One of the 'points' doesn't exist in the breakpoint map";
        }
    }

    @media #{$query} {
        @content;
    }
}


//
// SHORTCUTS
//


// Create print media query
@mixin print {
    @include bp((), '', 'print') {
        @content;
    }
}


// Create a max-width query, using $point as 'right-side' value
// @param $point Breakpoint key to use as 'right-side' value
// @param $direction Direction of breakpoints
// @param $media Media value to use
// @return string Media Query, wrapping @content
@mixin to($point, $direction: 'horizontal', $media: $breakpoint-media-default) {
    @include bp((to: $point), $direction, $media) {
        @content;
    }
}


// Create a min-width query, using $point as 'left-side' value
// @param $point Breakpoint key to use as 'left-side' value
// @param $direction Direction of breakpoints
// @param $media Media value to use
// @return string Media Query, wrapping @content
@mixin from($point, $direction: 'horizontal', $media: $breakpoint-media-default) {
    @include bp((from: $point), $direction, $media) {
        @content;
    }
}


// Create a min-width and max-width query, using $point as 'left-side' value and 'right-side' value
// @param $point Breakpoint key to use as 'left-side' value and 'right-side' value
// @param $direction Direction of breakpoints
// @param $media Media value to use
// @return string Media Query, wrapping @content
@mixin at($point, $direction: 'horizontal', $media: $breakpoint-media-default) {
    @include bp((at: $point), $direction, $media) {
        @content;
    }
}


// Create a min-width and max-width query, using $point-from as 'left-side' value and $point-to as 'right-side' value
// @param $point-from Breakpoint key to use as 'left-side' value
// @param $point-to Breakpoint key to use as 'right-side' value
// @param $direction Direction of breakpoints
// @param $media Media value to use
// @return string Media Query, wrapping @content
@mixin between($point-from, $point-to, $direction: 'horizontal', $media: $breakpoint-media-default) {
    @include bp((from: $point-from, to: $point-to), $direction, $media) {
        @content;
    }
}
