//**
//    Slicer: Creates a beautiful syntax for media queries
//    Created by Te Riu Warren (@tedawebguy) for the team at Summer of Dev (@summerofdev)
//    - Dependencies: Sass >= 3.4
//    - Version: 1.1.0
//    - License: MIT License
//
//    Current limitations:
//    - only horizontal breakpoints supported
//**



//
//  Variables
//

// $small-screen-up: 601px !default;
// $medium-screen-up: 993px !default;
// $large-screen-up: 1201px !default;
// $small-screen: 600px !default;
// $medium-screen: 992px !default;
// $large-screen: 1200px !default;

// $medium-and-up: "only screen and (min-width : #{$small-screen-up})" !default;
// $large-and-up: "only screen and (min-width : #{$medium-screen-up})" !default;
// $small-and-down: "only screen and (max-width : #{$small-screen})" !default;
// $medium-and-down: "only screen and (max-width : #{$medium-screen})" !default;
// $medium-only: "only screen and (min-width : #{$small-screen-up}) and (max-width : #{$medium-screen})" !default;

$slicer-horizontal-breakpoints: 0   400px   600px   800px   1000px  1200px !default;
// Slice numbers -------------  |  1  |   2   |   3   |   4   |   5   | -----------

$slicer-vertical-breakpoints: 0   300px   600px   900px !default;
// Slice numbers -------------  |  1  |   2   |   3   | -----------

$slicer-anti-overlap-correction: 1px !default;






// The dependency
@import "breakpoint/breakpoint";




//
//  Helpers
//


//
//  Returns total number of slices/breakpoints
//  - no arguments
//
@function total-slices() {
    @return length($slicer-horizontal-breakpoints);
}


//
//  Returns correction value to prevent media query overlap (0, -, +)
//  - dependent on global variable '$slicer-anti-overlap-correction'
//  - argument $breakpoint: a breakpoint, e. g. 800px or 20em
//  - argument $positive: * true - return only positive correction value (default), * false - return only negative correction value
//
@function anti-overlap-correction($breakpoint, $positive: true) {
    @if unit($breakpoint) == unit($slicer-anti-overlap-correction) and ($slicer-anti-overlap-correction > 0) == $positive {
        @return $slicer-anti-overlap-correction;
    }
    @return 0;
}



// left-bp-of-slice($slice)
// - $slice : <slice number> A number of a slice. Should be positive integer.
//
// Returns the left breakpoint of an Nth slice, e. g. `600px`.
@function left-bp-of-slice($slice) {
    $min: 1;
    $max: total-slices();
    // Making sure that the slice provided is valid
    @if $slice < $min or $slice > $max {
        @warn "Wrong Slice number provided: #{$slice}. Should be between #{$min} and #{$max}.";
    }
    @else {
        $left: i am declared;
        // Special treatment of the first slice to prevent a meaningless `min-width: 0` media query
        @if $slice == 1 {
            $left: max-width;
        }
        @else {
            // Returning the left edge of the slice
            $left: nth($slicer-horizontal-breakpoints, $slice);
            $left: $left + anti-overlap-correction($left, true);
        }
        @return $left;
    }
}

// right-bp-of-slice($slice)
// - $slice : <slice number> A number of a slice. Should be positive integer.
//
// Returns the right breakpoint of an Nth slice, e. g. `800px`.
@function right-bp-of-slice($slice) {
    $min: 1;
    $max: total-slices() - 1;
    // Making sure that the slice provided is valid
    @if $slice == total-slices() {
        @warn "Slice number provided: #{$slice}. It's the last slice, it has no right edge.";
    }
    @else if $slice < $min or $slice > $max {
        @warn "Wrong column number provided: #{$slice}. Should be between #{$min} and #{$max}.";
    }
    @else {
        // Reading the right edge of the slice
        $right: nth($slicer-horizontal-breakpoints, $slice + 1);
        @return $right + anti-overlap-correction($right, false);
    }
}

// bp($slice)
//
// A shortcut for nth($slicer-horizontal-breakpoints, $slice)
@function bp($slice) {
    @return nth($slicer-horizontal-breakpoints, $slice);
}





////////////////////////////////////////////////
// If you don't understand what's going on here,
// please read the README first.
////////////////////////////////////////////////

// Wraps the content block provided with a media query
// with min-width equal to the left edge of the left slice
// and max-width equal to the right edge of the right slice
//
// between($slice-left, $slice-right, $no-query: false)
// - $slice-left  : <slice number> A number of the left slice. Should be a positive integer.
// - $slice-right : <slice number> A number of the left slice. Should be a positive integer.
// - $no-query    : [<.class>]     A class to provide the no-query fallback (see Breakpoint docs).
@mixin between($slice-left, $slice-right, $no-query: false) {
    // Check if slice is within bounds
    @if $slice-right > total-slices() {
        @error "Slice '#{$slice-right}' is larger than number of slices defined";
    }
    @elseif $slice-left < 1 {
        @error "Slice '#{$slice-left}' is less than one (left)";
    }
    @elseif $slice-right < 1 {
        @error "Slice '#{$slice-right}' is less than one (right)";
    }


    // If the slices provided are the first and the last one, it shouldn't be a breakpoint
    @if $slice-left == 1 and $slice-right == total-slices() {
        @error "Slice's are the minimum and maximum, so this statement shouldn't be wrapped in a media query";
    }


    // @warn "@mixin between(#{$slice-left}, #{$slice-right}, #{$no-query}) called";
    // Retrieving the left edge of the left slice
    $context: left-bp-of-slice($slice-left);
    // Retrieving the right edge of the slice
    // unless the slice is the last one
    @if $slice-right < total-slices() {
        $right: right-bp-of-slice($slice-right);
        $context: append($context, $right);
    }
    // Setting the breakpoint
    //@warn "Context: #{$context}";
    @include breakpoint($context, $no-query) {
        @content;
    }

}

// Wraps the content block provided with a media query
// with min-width and max-width equal to the edges of a slice
//
// at($slice, $no-query: false)
// - $slice : <slice number> A number of a slice. Should be a positive integer.
// - $no-query    : [<.class>]     A class to provide the no-query fallback (see Breakpoint docs).
@mixin at($slice, $no-query: false) {
    @include between($slice, $slice, $no-query) {
        @content;
    }
}

// Wraps the content block provided with a media query
// with min-width equal to the right edge of a slice
//
// from($slice, $no-query: false)
// - $slice : <slice number> A number of a slice. Should be a positive integer.
// - $no-query    : [<.class>]     A class to provide the no-query fallback (see Breakpoint docs).
@mixin from($slice, $no-query: false) {
    @include between($slice, total-slices(), $no-query) {
        @content;
    }
}

// Wraps the content block provided with a media query
// with max-width equal to the right edge of a slice
//
// to($slice, $no-query: false)
// - $slice : <slice number> A number of a slice. Should be a positive integer.
// - $no-query    : [<.class>]     A class to provide the no-query fallback (see Breakpoint docs).
@mixin to($slice, $no-query: false) {
    //@warn "@mixin to(#{$slice}, #{$no-query}) called";
    @include between(1, $slice, $no-query) {
        @content;
    }
}
